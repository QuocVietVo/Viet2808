/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "usb_device.h"
#include "stm32f429i_discovery_lcd.h"
#include "stm32f429i_discovery_sdram.h"
#include "stm32f429i_discovery_gyroscope.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
float pointer[3];
float exvalue[3];
uint8_t buffer1 [10], buffer2 [10], buffer3 [10];
uint8_t string1[] = "\nCoordinates X: ";
uint8_t string2[] = "\nCoordinates Y: ";
uint8_t string3[] = "\nCoordinates Z: ";
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* Definitions for Task01 */
osThreadId_t Task01Handle;
const osThreadAttr_t Task01_attributes = {
  .name = "Task01",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for Task02 */
osThreadId_t Task02Handle;
const osThreadAttr_t Task02_attributes = {
  .name = "Task02",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for Queue01 */
osMessageQueueId_t Queue01Handle;
const osMessageQueueAttr_t Queue01_attributes = {
  .name = "Queue01"
};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void StartTask01(void *argument);
void StartTask02(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	BSP_GYRO_Init();
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init();

  	BSP_LCD_Init();//init LCD
    //set the layer buffer address into SDRAM
    BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
    BSP_LCD_SelectLayer(1);//select on which layer we write
    BSP_LCD_DisplayOn();//turn on LCD
    BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
    //write text

  /* USER CODE END 2 */

  /* Init scheduler */
 osKernelInitialize();//1

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue01 */
  Queue01Handle = osMessageQueueNew (64, sizeof(uint16_t), &Queue01_attributes);//2

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);//3

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);//4

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();//5

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /*L3GD20_ReadXYZAngRate(&exvalue);		//get gyroscope value


	  	  sprintf(buffer1, "%f", exvalue[0]);	//convert float into string to print
	  	  sprintf(buffer2, "%f", exvalue[1]);	//convert float into string to print
	  	  sprintf(buffer3, "%f", exvalue[2]);	//convert float into string to print

	  	  //write text through Virtual Com Port
	  	  HAL_Delay(250);
	  	  CDC_Transmit_HS(string1, sizeof(string1));
	  	  HAL_Delay(250);
	  	  CDC_Transmit_HS(buffer1, sizeof(buffer1));
	  	  HAL_Delay(250);
	  	  CDC_Transmit_HS(string2, sizeof(string2));
	  	  HAL_Delay(250);
	  	  CDC_Transmit_HS(buffer2, sizeof(buffer2));
	  	  HAL_Delay(250);
	  	  CDC_Transmit_HS(string3, sizeof(string3));
	  	  HAL_Delay(250);
	  	  CDC_Transmit_HS(buffer3, sizeof(buffer3));
	  	  HAL_Delay(250);

	  	  BSP_LCD_Clear(LCD_COLOR_BLUE);
	  	  if (exvalue[0] > 1)
	  	  {
	  		  if (exvalue[1] > 1)
	  		  {
	  			  BSP_LCD_FillTriangle(90, 120, 150, 240, 270, 240);
	  			  BSP_LCD_FillTriangle(210, 240, 210, 120, 150, 180);
	  			HAL_Delay(500);
	  		  }
	  		  else if (exvalue[1] < -1)
	  		  {
	  	  	  	  BSP_LCD_FillTriangle(90, 120, 150, 240, 270, 240);
	  			  BSP_LCD_FillTriangle(60, 30, 60, 120, 150, 180);
	  			HAL_Delay(500);
	  		  }
	  	  }
	  	  else if (exvalue[0] < 1)
	  	  {
	  		  if (exvalue[1] > 1)
	  		  {
	  			  BSP_LCD_FillTriangle(90, 120, 150, 60, 30, 60);
	  			  BSP_LCD_FillTriangle(210, 240, 210, 120, 150, 180);
	  			HAL_Delay(500);
	  		  }
	  		  else if (exvalue[1] < -1)
	  		  {
	  			  BSP_LCD_FillTriangle(90, 120, 150, 60, 30, 60);
	  			  BSP_LCD_FillTriangle(60, 30, 60, 120, 150, 180);
	  			HAL_Delay(500);
	  		  }
	  	  }


    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartTask01 */
/**
  * @brief  Function implementing the Task01 thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	float sxValue[3];
  for(;;)
  {
	  L3GD20_ReadXYZAngRate(&pointer);		//get gyroscope value

	  sprintf(buffer1, "%f", pointer[0]);	//convert float into string to print
	  sprintf(buffer2, "%f", pointer[1]);	//convert float into string to print
	  sprintf(buffer3, "%f", pointer[2]);	//convert float into string to print
	  //write text through Virtual Com Port
	  osDelay(250);
	  CDC_Transmit_HS(string1, sizeof(string1));
	  osDelay(250);
	  CDC_Transmit_HS(buffer1, sizeof(buffer1));
	  osDelay(250);
	  CDC_Transmit_HS(string2, sizeof(string2));
	  osDelay(250);
	  CDC_Transmit_HS(buffer2, sizeof(buffer2));
	  osDelay(250);
	  CDC_Transmit_HS(string3, sizeof(string3));
	  osDelay(250);
	  CDC_Transmit_HS(buffer3, sizeof(buffer3));
	  for (int i = 0; i < 3; i++)
	  {
		  osMessageQueuePut(myQueue01Handle, &sxValue[i], 0, NULL);
	  }
  }

void StartTask02(void *argument)
{
	float rxValue[3];
  for(;;)
  {
	  BSP_LCD_Clear(LCD_COLOR_BLUE);
	  for (int i = 0; i < 3; i++)
	  {
		  status = osMessageQueueGet(myQueue01Handle, &rxValue[i], NULL, NULL);
	  }
	  for (int i = 0; i < 3; i++)
	  {
		  rxValue[i] = pointer[i];
	  }
	  if (rxValue[0] > 1)
	  {
	  	  if (rxValue[1] > 1)
	  	  {
	  		BSP_LCD_FillTriangle(90, 120, 150, 240, 270, 240);
	  		BSP_LCD_FillTriangle(210, 240, 210, 120, 150, 180);
	  	  }
	  	  else if (rxValue[1] < -1)
	  	  {
	  		BSP_LCD_FillTriangle(90, 120, 150, 240, 270, 240);
	  		BSP_LCD_FillTriangle(60, 30, 60, 120, 150, 180);
	  	  }
	  }
	  else if (rxValue[0] < -1)
	  {
	  	  if (rxValue[1] > 1)
	  	  {
	  		BSP_LCD_FillTriangle(90, 120, 150, 60, 30, 60);
	  		BSP_LCD_FillTriangle(210, 240, 210, 120, 150, 180);
	  	  }
	  	  else if (rxValue[1] < -1)
	  	  {
	  		BSP_LCD_FillTriangle(90, 120, 150, 60, 30, 60);
	  		BSP_LCD_FillTriangle(60, 30, 60, 120, 150, 180);
	  	  }
	  }
	  osDelay(1000);
  }
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM6 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
